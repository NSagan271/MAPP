%HOW TO ADD A NEW TRANSIENT ANALYSIS TEST FOR A CIRCUIT DAE
%
%MAPPtest for the transient analysis test is carried out by running the script
%MAPPtest_transient.m, which in turn calls the function
%"generate_all_transient_tests()". This function creates a MATLAB cell array
%object "alltests" containing information about all circuit DAEs on which
%transient analysis test is to be carried out. It also contains various
%parameters needed to run the transient analysis test. Then, another function
%"test_transient()" is called iteratively on each circuit in "alltests". 
%
%A new transient analysis test can be added by modifying the function
%"generate_all_transient_tests()" with the following workflow.
%
%1. Before adding a new test to the MAPP transient test system, write a MATLAB
%   script which successfully runs the new transient analysis on the
%   corresponding circuit DAE. Run that script and verify the correctness of
%   the simulation result.  There is no recommended way to do this check.
%   However, there are several standard ways in which this check can be
%   performed, e.g., by doing hand-calculation, comparing the MAPP simulation
%   result against in-house or published experimental data or against
%   simulation output of a simulator which you trust, etc.   
%
%2. Modify the script
%   "MAPP-ROOT/A1oDAEAPI-MATLAB/generate_all_transient_tests.m" as per the
%   instructions provided below.
%
%   a. Find out how many testcases are being generated by
%      generate_all_transient_case(). Say that there are 26 testcases being
%      generated and the new test you want to add is the 27th. Go to the end of
%      the script and add the following line.
%
%      function out = generate_testcase27()
%
%   b. Generate the circuit DAE by calling the appropriate MATLAB script and
%      assign it to "test.DAE".
%
%      EXAMPLE:
%      test.DAE = BJTdiffpair_DAEAPIv6('BJT-differential-pair');
%
%      In the above example, the generated reference test data will be stored
%      in a MATLAB .mat file "BJT-differential-pair_transient.mat". So, please
%      pay close attention while choosing this unique string ID so that none of
%      the existing reference data .mat files are over-written in the process.
%
%      You should replace the line noted in the above example with one which
%      calls the circuit DAE noted in step 1. 
%
%   c. Set up the input function(s) for the transient analysis 
%
%      EXAMPLE:
%      utargs.A = 0.2; utargs.f=1e2; utargs.phi=0; 
%      utfunc = @(t, args) args.A*sin(2*pi*args.f*t + args.phi);
%      test.DAE = feval(test.DAE.set_utransient, utfunc, utargs, test.DAE);
%
%      These input functions should be the same as the ones in the MATLAB
%      script noted in step 1.
%
%   d. Set up the simulation time-related parameters and assign them to
%      the appropriate fields in "test.testargs.simparms".
%
%      EXAMPLE:
%      test.testargs.simparms.xinit = [3; 3; -0.5]; % Initial condition
%      test.testargs.simparms.tstart = 0;           % Start time
%      test.testargs.simparms.tstep = 10e-5;        % Time step
%      test.testargs.simparms.tstop = 5e-2;         % Stop time
%
%      These parameters should be the same as those in the MATLAB script noted
%      in step 1.
%
%   e. Call the function "defaultTranParms" and assign the output to
%      test.testargs.transparm. You can also change the default values of the
%      various transient simulation parameters in test.testargs.transparm. To
%      learn more about the output of "deafultLMSparms" and how it affects a
%      transient simulation, type "help defaultTranParms" at the MATLAB command
%      line. 
%
%      EXAMPLE:
%      test.testargs.transparm = defaultTranParms();
%      test.testargs.transparm.trandbglvl = 0 ; % Display only errors
%
%      These parameters should be the same as those in the MATLAB script noted
%      in step 1.
%
%   f. Assign the LMS method to be used in the transient simulation to
%      "test.testargs.LMSalgo". The acceptable values for this variable are
%      'BE','FE','TRAP', and 'GEAR2'.
%
%      EXAMPLE:
%      test.testargs.LMSalgo = 'TRAP';
%
%      This LMS method should be the same as that in the MATLAB script noted in
%      step 1.
%
%   g. Add the following three lines to your code.
%      
%      test.testargs.updateReference = 1; 
%      test.testargs.LogMsgDisplay = 1; 
%      end
%
%      Save the script and exit.
%
%   h. Open the script 
%      "MAPP-ROOT/A1oDAEAPI-MATLAB/MAPPtest_transient.m" and find the following
%      line -
%
%           alltests = generate_all_transient_tests();
%
%      Replace that line with the following:
%
%           alltests = generate_all_transient_tests(27);
%
%      Save the script and exit.
%
%3. Go to the MATLAB command line and run the script "MAPPtest_transient". Upon
%   successful execution, the input data, the output data and the parameter
%   values pertinent to the transient test will be saved in a .mat MATLAB file
%   as reference test data. This data will be used as a reference to compare
%   against while running MAPPtest_transient in the compare/test mode.
%
%4. Open the script 
%      "MAPP-ROOT/A1oDAEAPI-MATLAB/MAPPtest_transient.m" and find the line:
%
%           alltests = generate_all_transient_tests(27);
%
%   Replace that line with the following line: 
%
%           alltests = generate_all_transient_tests();
%
%   Save the script and exit.
%
%5. Open the script 
%      "MAPP-ROOT/A1oDAEAPI-MATLAB/generate_all_transient_tests.m" 
%
%   and find the following lines: 
%
%      test27.testargs.updateReference = 1; 
%      test27.testargs.LogMsgDisplay = 1; 
%
%   Replace them with the following two lines:
%
%      test27.testargs.updateReference = 0; 
%      test27.testargs.LogMsgDisplay = 0; 
%
%6. Then find the following line:
%    
%    no_of_circuits = 26;
%
%   Replace that with the following line:
%
%    no_of_circuits =27;
%
%   Save the script and exit.
