function test_transient(DAE,LMSalgo,simparms,transparms,update,MsgDisplay)
%function test_transient(DAE,LMSalgo,simparms,transparms,update,MsgDisplay)
%MAPP testing of transient analysis on a circuit DAE
%
%Arguments: 
%
%DAE         A MATLAB structure in DAEAPI describing the circuit DAE on
%            which transient analysis is to be carried out 
%
%LMSalgo     string {'BE','FE',TRAP','GEAR2'}
%
%simparms    A structure containing following parameters required for
%            simulation all the parameters needed for running
%
%                simparms.xinit  := Intial condition
%                simparms.tstart := Start time
%                simparms.tstep  := Time step
%                simparms.stop   := Stop time
%
%transparms  A structure containing all the parameters needed for running
%            transient analysis on the circuit DAE. The structure of
%            transparm are as follows: (same as transparms in LMS.m)
%
%            tranparms.NRparms
%            tranparms.stepControlParms
%            tranparms.correctorFunc
%            tranparms.correctorFuncArgs
%            tranparms.stopFunc
%            tranparms.stopFuncArgs
%            tranparms.trandbglvl
%                 -1: not even errors
%                  0: errors only
%                  1 (default): minimal output: 
%                    - '+' for successful timestep
%                    - '/' for cut/redone timestep due to NR failure
%                    - '|' for reduced timestep due to too many NR iterations
%                    - '\' for increased timestep due to too many NR iterations
%                  2: informational output
%
%update      1 (update), 0 (testing/comparison)
%
%MsgDisplay  1 (verbose mode) - results of all the tests conducted are displayed
%            0 (non-verbose mode) - only final pass message it displayed.
%                                   However, if any of the sub-tests fail, then
%                                   it displays all relevant information to the
%                                   failure test.

%                 
%
%This script 
% 1. If update == 0, then 
%        a. compares DAE parameters, transient inputs, LMSalgo, simparms and
%           transparms of both the provided DAE and reference DAE. If they are
%           same, then the script runs a transient simulation on the circuit DAE
%           (DAE_filename); ifelse throws an error and aborts.
%
%        b. compares the output waveforom from the simulation to that of
%           previously stored reference output waveform (stored in a MATLAB file
%           named "DAE_filename_transient.mat") generated by DAE_filename.m This
%           comaprison uses function compare_waveform(), to do this waveform
%           comparison.
%
%        c. If the datafile DAEfilename_transient.mat is not present, then the
%           script aborts giving an error message --
%           "DAE_filename_transient.mat" file not found. Run the script with
%           argument "updateReference".
%
%      
%
% 2. If update == 1, then
%       a. run the transient simulation on DAEF_filename and store in
%          the testdata directory 
%
%       b. IMP NOTE: If this script is run with 'update = 1' option, then the
%          DAE, the TransObj created off the DAE, and associated simparms and
%          tranparms are saved in a .mat file, which is named as 
%          DAE.uniqIDstr"_transient.mat". 
%       
%   TODO: Pass it to the function
abstol=1e-9; reltol=1e-6;

% TODO: 
%Provide definite information when the tests fail 
%Better argument management
%More description in terms of displaying information about what is going
%on

%Create the datafile name with path
data_filename = [ feval(DAE.uniqID,DAE) '_transient.mat'];
  
      % Compare or update
      if update == 0 
              % Compare the waveform with reference wavefor
              script_task = 'compare';

              % But, first check if there is the required testdata file
              if ~exist(data_filename,'file')

                      error([ sprintf('File %s_transient.mat not found\n',data_filename) ...
                              ' Run the script ' ...
                              'with argument update = 1"']) 
                      
              end
              load(data_filename);

              elseif update == 1
                      script_task = 'update'; 

      else
              % Usage
      end

      TRmethods = LMSmethods();
      if strcmp(LMSalgo,'BE')
              TRmethod = TRmethods.BE;
      elseif strcmp(LMSalgo, 'FE')
              TRmethod = TRmethods.FE;
      elseif strcmp(LMSalgo,'TRAP')
              TRmethod = TRmethods.TRAP;
      elseif strcmp(LMSalgo,'GEAR2')
              TRmethod = TRmethods.GEAR2;
      else
              user_supplied_method = sprintf('User-supplied LMS method is %s', ...
                                       TRmethod);
              error(['The only supported LMS methods are BE, FE, TRAP and ' ...
                    'GEAR2.' user_supplied_method ' Supply the correct LMS ' ...
                    'method.']);
      end


      % setup DAE
      %gvalc([ 'DAE =' DAE_filename ';']);
      % Create transient object
      TransObj = LMS(DAE,TRmethod,transparms);
      %---------------------------------------------------------------
      % Pre-simulation comparison/update (input, DAE and LMS parameters)
      %--------------------------------------------------------------
      % Compare/Update DAE parameters
      % if script_task == 'compare', check if this matches with saved data
      if strcmp(script_task,'compare')
              % Compare if the transient input to current DAE and ref. DAE
              % are same
              tt = simparms.tstart:simparms.tstep:simparms.tstop; % generate time samples
              n_input = feval(DAE.ninputs,DAE);
              input_names = feval(
              utrans = feval(DAE.utransient,tt,DAE);
              ref_utrans = feval(ref.DAE.utransient,tt,ref.DAE);
              pass_or_fail = compare_waveform(utrans,ref_utrans,abstol,reltol);
              if pass_or_fail 
                      if MsgDisplay
                              oof = sprintf('Comparing u_transient of  test and ref. DAE (abstol= %g, reltol=%g)',abstol,reltol);
                              print_success(oof);
                      end
              else
                      print_failure('Comparing u_transient of test and ref. DAE');
                      error(['The transient input set to the test DAE ' ...
                              'is not same as the transient input ' ...
                              'to the DAE in the ref. testdata']);
              end

              % Compare the parameters of both the DAEs
              pass_or_fail = compare_params(DAE,ref.DAE);
              if pass_or_fail 
                      if MsgDisplay
                              print_success('Comparing parameters of test and ref. DAE');
                      end
              else
                      print_failure('Comparing parameters of test and ref. DAE');
                      error(['The transient input set to the DAE set in this ' ...
                              'script is not same as the transient input ' ...
                              'to the DAE in the ref. testdata']);
              end

              % Compare the LMS methods 
              user_supplied_TRmethod = TransObj.TRmethod.name;
              ref_supplied_TRmethod = ref.TransObj.TRmethod.name;
              pass_or_fail = strcmp(user_supplied_TRmethod,ref_supplied_TRmethod);
              if pass_or_fail 
                      if MsgDisplay
                              print_success('Comparing LMS methods for test and ref. transient analysis');
                      end
              else
                      print_failure('Comparing LMS methods for test and ref. transient analysis');
                      fprintf('The user supplied LMS method is %s\n',user_supplied_TRmethod);
                      fprintf('The ref. LMS method is %s\n',ref_supplied_TRmethod);
                      error(['Set the LMS method for testcase same as ref. DAE or' ...
                              ' run with option update = 1 ']);
              end

              % Compare the parameters of transparms in LMS methods 
              pass_or_fail = compare_tranparms(TransObj,ref.TransObj);

              if pass_or_fail 
                      if MsgDisplay
                              print_success('Comparing LMS transparms for test and ref. LMS object');
                      end
              else
                      print_failure('Comparing LMS transparms for test and ref. LMS object');
                      fprintf('Inconsistent LMS transparms.');
                      error(['Set the LMS transparms for testcase same as ref. or' ...
                              ' run with option update =1 ']);
              end

              % Compare simulation params
               % pass_or_fail = compare_simparms(simparms,ref.simparms);
               oof1 = 1;
               for count =1 :1: length(simparms.xinit)
                       if (simparms.xinit(count) ~=  ref.simparms.xinit(count));
                               oof1 = 0;
                       end
               end
               oof2=  (simparms.tstart == ref.simparms.tstart);
               oof3=  (simparms.tstep == ref.simparms.tstep);
               oof4=  (simparms.tstop == ref.simparms.tstop);
              pass_of_fail = (oof1 && oof2 && oof3 && oof4); 
              if pass_or_fail 
                      if MsgDisplay 
                              print_success('Comparing simulation parameters for test and ref. LMS object');
                      end
              else
                      print_failure('Comparing simulation parameters for test and ref. LMS object');
                      error(['Set the simulation parameters for testcase same as ref. or' ...
                              ' run with option update = 1 ']);
              end
      end
   
      TransObj = feval(TransObj.solve,TransObj,simparms.xinit,simparms.tstart,...
                  simparms.tstep,simparms.tstop);

      % Compare output 
      if strcmp(script_task,'compare')
              o_names = feval(DAE.outputnames,DAE);
              C = feval(DAE.C,DAE);
              D = feval(DAE.D,DAE);
              unk_names = feval(DAE.unknames,DAE);
              no_of_unknowns = feval(DAE.nunks,DAE);

              pass_all_output = 1; 

              for count = 1: 1: no_of_unknowns
                      % Compare the simulation output 
                      pass_or_fail = compare_waveform(TransObj.vals(count,:),ref.TransObj.vals(count,:),abstol,reltol);
                      if pass_or_fail 
                              if MsgDisplay
                                      oof = sprintf('Comparing %s of test and ref. LMS object (abstol= %g, reltol=%g)',...
                                              unk_names{count},abstol,reltol);
                                      print_success(oof);
                              end
                      else
                              oof = sprintf('Comparing %s of test and ref. LMS object (abstol= %g, reltol=%g)',...
                                      unk_names{count},abstol,reltol);
                              print_failure(oof);
                              pass_all_output = 0; 
                      end
              end
              if pass_all_output
                      oof = sprintf('Comparison between test and ref. DAE (%s) output (abstol= %g, reltol=%g)',...
                              feval(DAE.uniqID,DAE),abstol,reltol);
                      print_success(oof);
              end
      else
              %save everything
              ref.DAE = DAE;
              ref.TransObj = TransObj;
              ref.simparms = simparms;
              data_filename = [ feval(DAE.uniqID,DAE) '_transient.mat'];
              save(data_filename,'ref');
      end
end

function out = compare_waveform(waveform1,waveform2,abstol,reltol)
        % This function compares if two waveforms are equal to each other

        % Compute RMS value of waveform 1 and waveform2
        waveform = waveform1-waveform2;
        RMS_waveform_diff =sqrt(sum(waveform.*waveform)/length(waveform)); % rms(waveform1);
        if length(RMS_waveform_diff)>1
                keyboard
        end
        %RMS_waveform1 =sqrt((waveform1.*waveform1)/length(waveform1)); % rms(waveform1);
        %RMS_waveform2 =sqrt((waveform2.*waveform2)/length(waveform2)); % rms(waveform1);
        out = RMS_waveform_diff<  reltol*max([abs(waveform1),abs(waveform2)]) + abstol;
end

function out = compare_params(DAE,ref_DAE)
        % Compares parameter of two DAEs
        n_parms = feval(DAE.nparms,DAE);
        parms = feval(DAE.getparms,DAE);
        ref_parms = feval(ref_DAE.getparms,DAE);
        out = 1;
        for count = 1:1:n_parms
                if parms{count} ~= ref_parms{count}
                        out=0;
                        % TOD: More descriptive where things went wrong
                end
        end
end

function out = compare_tranparms(TransObj,ref_TransObj)
       oof1 = (TransObj.tranparms.NRparms.maxiter == ref_TransObj.tranparms.NRparms.maxiter);
       oof2 = (TransObj.tranparms.NRparms.reltol == ref_TransObj.tranparms.NRparms.reltol);
       oof3 = (TransObj.tranparms.NRparms.abstol == ref_TransObj.tranparms.NRparms.abstol);
       oof4 = (TransObj.tranparms.NRparms.residualtol == ref_TransObj.tranparms.NRparms.residualtol);
       oof5 = (TransObj.tranparms.NRparms.MPPINR_use_pinv == ref_TransObj.tranparms.NRparms.MPPINR_use_pinv);

       oof6 = (TransObj.tranparms.NRparms.limiting == ref_TransObj.tranparms.NRparms.limiting);
       % Do not compare dbglvl

       %Not all of them are necessary if doStepControl is 0
       oof7 = (TransObj.tranparms.stepControlParms.doStepControl == ...
               ref_TransObj.tranparms.stepControlParms.doStepControl);
       oof8 = (TransObj.tranparms.stepControlParms.NRiterRange == ...
               ref_TransObj.tranparms.stepControlParms.NRiterRange);
       oof9 = (TransObj.tranparms.stepControlParms.absMinStep == ...
               ref_TransObj.tranparms.stepControlParms.absMinStep);
       oof10 = (TransObj.tranparms.stepControlParms.MaxStepFactor == ...
               ref_TransObj.tranparms.stepControlParms.MaxStepFactor);
       oof11 = (TransObj.tranparms.stepControlParms.increaseFactor== ...
               ref_TransObj.tranparms.stepControlParms.increaseFactor);
       oof12 = (TransObj.tranparms.stepControlParms.cutFactor == ...
               ref_TransObj.tranparms.stepControlParms.cutFactor);
       oof13 = (TransObj.tranparms.stepControlParms.NRfailCutFactor ...
               == ref_TransObj.tranparms.stepControlParms.NRfailCutFactor);
       out = (oof1 &&  oof2 &&  oof3 &&   oof4 &&  oof5 &&  oof6 &&  oof7 && oof8(1) && oof8(2) && ...
                oof9 &&  oof10 &&  oof11 &&  oof12 && oof13); 
end
        
% Tianshi Wang's code

function print_success(name)
	blanks = repmat('-', 1, abs(70-length(name)));
	fprintf(1, '%s %s pass \n', name, blanks);
end % print_success

function print_failure(name, test_results, reference_results)
	blanks = repmat('-', 1, 70-length(name));
	fprintf(1, '%s %s _FAIL_\n', name, blanks);
	if nargin ==  3
		% fprintf(1, 'testing results \n');
		test_results
		% fprintf(1, 'reference results \n');
		reference_results
	elseif nargin ==  2
		fprintf(1, 'testing results \n');
		test_results
	end
end % print_failure

