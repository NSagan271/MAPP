function alltests = generate_all_transient_tests()
%function alltests = generate_all_transient_tests()
%Test script to generate transient tests on all available DAEs

	i = 0;
        
        % Access to default LMS parms
        LMStranparms = defaultTranParms();

        % Create empty return structure
        alltests = {};


        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        %Transient Test Case 1: BJT differential pair
        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        i = i+1; 
        % Circuit DAE. 
        % The uniqID (the string argument passed to the DAE script) will be used
        % to save the reference output data.
        test1.DAE =  BJTdiffpair_DAEAPIv6('BJT-differential-pair');
        test1.type = 'transient'; % Type of analysis
        % If the analysis is transient, then setup the u_transient of the
        % circuit DAE
        utargs.A = 0.2; utargs.f=1e2; utargs.phi=0; 
        utfunc = @(t, args) args.A*sin(2*pi*args.f*t + args.phi);
        test1.DAE = feval(test1.DAE.set_utransient, utfunc, utargs, test1.DAE); 
        % Simulation time-related parameters
        test1.testargs.simparms.xinit = [3; 3; -0.5]; % Initial condition
        test1.testargs.simparms.tstart = 0;           % Start time
        test1.testargs.simparms.tstep = 10e-5;        % Time step
        test1.testargs.simparms.tstop = 5e-2;         % Stop time
        % Transient simulation parameters
        test1.testargs.transparm = LMStranparms; % Transient simulation
        % Any changes to default transparm setting
        test1.testargs.transparm.trandbglvl = 0 ; % Only errors 
        % LMS method to be used
        test1.testargs.LMSalgo = 'TRAP'; % {'BE','FE','TRAP','GEAR2'}

        % Update or testing/comparison
        test1.testargs.updateReference = 0; % 1 (update), 0 (testing/comparison)
        test1.testargs.LogMsgDisplay = 0; % 1 = verbose, 0 = non-verbose

        % save it in the output structure
        alltests = {alltests{:}, test1};



        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        %Transient Test Case 2: BSIM3 Ring Oscillator
        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        i = i+1; 
        % Circuit DAE. 
        % The uniqID (the string argument passed to the DAE script) will be used
        % to save the reference output data.
        test2.DAE = BSIM3_ringosc('BSIM3_RingOscillator');
        test2.type = 'transient'; % Type of analysis
        % If the analysis is transient, then setup the u_transient of the
        % circuit DAE
        % Set transient input for VDD
        const_func = @(t,arg)1.2; % Constant VDD
        test2.DAE = feval(test2.DAE.set_utransient, 'vdd:::E', const_func, [], test2.DAE); 

        % Simulation time-related parameters
        n_unks = feval(test2.DAE.nunks,test2.DAE);         % No. of unknowns 
        test2.testargs.simparms.xinit = 0.5*ones(n_unks,1); % Initial condition
        test2.testargs.simparms.tstart = 0;           % Start time
        test2.testargs.simparms.tstep = 6e-9;        % Time step
        test2.testargs.simparms.tstop = 1e-7;         % Stop time
        % Transient simulation parameters
        test2.testargs.transparm = LMStranparms; % Transient simulation
        % Any changes to default transparm setting
        test2.testargs.transparm.trandbglvl = 0 ; % Only errors 
        % LMS method to be used
        test2.testargs.LMSalgo = 'GEAR2'; % {'BE','FE','TRAP','GEAR2'}

        % Update or testing/comparison
        test2.testargs.updateReference = 0; % 1 (update), 0 (testing/comparison)
        test2.testargs.LogMsgDisplay = 0; % 1 = verbose, 0 = non-verbose
        % save it in the output structure
        alltests = {alltests{:}, test2};



